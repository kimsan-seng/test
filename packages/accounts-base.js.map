{"version":3,"sources":["meteor://ðŸ’»app/packages/accounts-base/server_main.js","meteor://ðŸ’»app/packages/accounts-base/accounts_common.js","meteor://ðŸ’»app/packages/accounts-base/accounts_server.js"],"names":["module1","export","AccountsServer","link","v","Accounts","Meteor","server","users","call","module","_objectSpread","default","AccountsCommon","EXPIRE_TOKENS_INTERVAL_MS","VALID_CONFIG_KEYS","constructor","options","_options","connection","undefined","_initConnection","_initializeCollection","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","DEFAULT_LOGIN_EXPIRATION_DAYS","LOGIN_UNEXPIRING_TOKEN_DAYS","lceName","LoginCancelledError","makeErrorType","description","message","prototype","name","numericError","collection","Mongo","Collection","Error","collectionName","_preventAutopublish","userId","_addDefaultFieldSelector","arguments","length","defaultFieldSelector","fields","keys","Object","keys2","user","findOne","userAsync","Promise","asyncApply","findOneAsync","config","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","hasOwnProperty","isClient","Package","OAuthEncryption","loadKey","oauthSecretKey","forEach","key","includes","concat","_name","onLogin","func","ret","register","_startupCallback","callback","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","loginExpiration","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpiration","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpiration","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","_objectWithoutProperties","crypto","URL","hasOwn","NonEmptyString","Match","Where","x","check","String","_this","this","onCreateLoginToken","_onCreateLoginTokenHook","_selectorForFastCaseInsensitiveLookup","fieldName","string","prefix","substring","Math","min","orClause","generateCasePermutationsForString","map","prefixPermutation","selector","RegExp","_escapeRegExp","caseInsensitiveClause","$and","$or","_findUserByQuery","query","id","fieldValue","username","email","candidateUsers","find","limit","fetch","_handleError","msg","throwError","errorCode","error","ambiguousErrorMessages","_userQueryValidator","Optional","_server","_initServerMethods","_initAccountDataHooks","_autopublishFields","loggedInUser","otherUsers","_defaultPublishFields","projection","profile","emails","_initServerPublications","_accountData","_userObservesForConnections","_nextUserObserveNumber","_loginHandlers","setupUsersCollection","setupDefaultLoginHandlers","setExpireTokensInterval","_validateLoginHook","_validateNewUserHooks","defaultValidateNewUserHook","bind","_deleteSavedTokensForAllUsersOnStartup","_skipCaseInsensitiveChecksForTest","urls","resetPassword","token","extraParams","buildEmailUrl","verifyEmail","loginToken","enrollAccount","addDefaultRateLimit","path","url","absoluteUrl","params","entries","value","searchParams","append","toString","currentInvocation","_CurrentMethodInvocation","get","_CurrentPublicationInvocation","validateLoginAttempt","validateNewUser","push","beforeExternalLogin","_beforeExternalLoginHook","onCreateUser","_onCreateUserHook","wrapFn","onExternalLogin","_onExternalLoginHook","setAdditionalFindUserOnExternalLogin","_additionalFindUserOnExternalLogin","_validateLogin","attempt","cloneAttemptWithConnection","e","allowed","_successfulLogin","each","_failedLogin","_successfulLogout","_loginUser","methodInvocation","stampedLoginToken","_generateStampedLoginToken","_insertLoginToken","_noYieldsAllowed","_setLoginToken","_hashLoginToken","setUserId","tokenExpires","_attemptLogin","methodName","methodArgs","result","type","methodArguments","Array","from","_loginMethod","fn","await","tryLoginMethod","_reportLoginFailure","registerLoginHandler","handler","_runLoginHandlers","destroyToken","update","$pull","hashedToken","accounts","methods","login","logout","_getLoginToken","getNewToken","currentHashedToken","currentStampedToken","services","resume","loginTokens","stampedToken","newStampedToken","removeOtherTokens","currentToken","$ne","configureLoginService","ObjectIncluding","service","oauth","serviceNames","ServiceConfiguration","configurations","keyIsLoaded","secret","seal","insert","onConnection","onClose","_removeTokenFromConnection","publish","ready","is_auto","startup","customFields","_id","autopublish","toFieldSelector","reduce","prev","field","addAutopublishFields","opts","apply","forLoggedInUser","forOtherUsers","setDefaultPublishFields","_getAccountData","connectionId","data","_setAccountData","hash","createHash","digest","_hashStampedToken","hashedStampedToken","_excluded","_insertHashedLoginToken","$addToSet","_clearAllLoginTokens","$set","_getUserObserve","observe","stop","newToken","myObserveNumber","defer","foundMatchingUser","observeChanges","added","removed","close","nonMutatingCallbacks","Random","_expirePasswordResetTokens","oldestValidDate","tokenLifetimeMs","tokenFilter","$exists","expirePasswordToken","_expirePasswordEnrollTokens","_expireTokens","userFilter","$lt","multi","superResult","expireTokenInterval","clearInterval","insertUserDoc","createdAt","pinEncryptedFieldsToUser","fullUser","defaultCreateUserHook","hook","errmsg","_testEmailDomain","domain","restrictCreationByEmailDomain","test","_deleteSavedTokensForUser","tokensToDelete","$unset","$pullAll","loginTokensToDelete","updateOrCreateUserFromExternalService","serviceName","serviceData","serviceIdKey","isNaN","parseInt","setAttrs","removeDefaultRateLimit","resp","DDPRateLimiter","removeRule","defaultRateLimiterRuleId","addRule","clientAddress","generateOptionsForEmail","reason","extra","to","emailTemplates","subject","text","html","headers","_checkForCaseInsensitiveDuplicates","displayName","ownUserId","skipCheck","matchedUsers","_createUserCheckingDuplicates","_ref","newUser","address","verified","ex","remove","clonedAttempt","EJSON","clone","defaultResumeLoginHandler","oldUnhashedStyleToken","isEnroll","resetRangeOr","expireFilter","setInterval","_Package$oauthEncryp","isSealed","open","emailIsGood","values","allow","modifier","createIndexAsync","unique","sparse","permutations","i","ch","charAt","lowerCaseChar","toLowerCase","upperCaseChar","toUpperCase"],"mappings":"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;IACtC,EACF;EACP;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEK,IAAIA,CAACrC,OAAO,EAAE;IACZ,MAAM4B,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;IAC5B,OAAOA,MAAM,GACT,IAAI,CAACrC,KAAK,CAAC+C,OAAO,CAACV,MAAM,EAAE,IAAI,CAACC,wBAAwB,CAAC7B,OAAO,CAAC,CAAC,GAClE,IAAI;EACV;;EAEA;AACF;AACA;AACA;AACA;AACA;EACQuC,SAASA,CAACvC,OAAO;IAAA,OAAAwC,OAAA,CAAAC,UAAA,OAAE;MACvB,MAAMb,MAAM,GAAG,IAAI,CAACA,MAAM,CAAC,CAAC;MAC5B,OAAOA,MAAM,GACT,IAAI,CAACrC,KAAK,CAACmD,YAAY,CAACd,MAAM,EAAE,IAAI,CAACC,wBAAwB,CAAC7B,OAAO,CAAC,CAAC,GACvE,IAAI;IACV,CAAC;EAAA;EACD;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE2C,MAAMA,CAAC3C,OAAO,EAAE;IACd;IACA;IACA;IACA;IACA;IACA,IAAIX,MAAM,CAACuD,QAAQ,EAAE;MACnBC,yBAAyB,CAACC,oBAAoB,GAAG,IAAI;IACvD,CAAC,MAAM,IAAI,CAACD,yBAAyB,CAACC,oBAAoB,EAAE;MAC1D;MACA;MACAzD,MAAM,CAAC0D,MAAM,CACX,0DAA0D,GACxD,yDACJ,CAAC;IACH;;IAEA;IACA;IACA;IACA,IAAIZ,MAAM,CAAChB,SAAS,CAAC6B,cAAc,CAACxD,IAAI,CAACQ,OAAO,EAAE,gBAAgB,CAAC,EAAE;MACnE,IAAIX,MAAM,CAAC4D,QAAQ,EAAE;QACnB,MAAM,IAAIxB,KAAK,CA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","file":"/packages/accounts-base.js","sourcesContent":["import { AccountsServer } from \"./accounts_server.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all server-side accounts-related methods.\n */\nAccounts = new AccountsServer(Meteor.server);\n\n// Users table. Don't use the normal autopublish, since we want to hide\n// some fields. Code to autopublish this is in accounts_server.js.\n// XXX Allow users to configure this collection name.\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n*/\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the server version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsServer\n};\n","import { Meteor } from 'meteor/meteor';\n\n// config option keys\nconst VALID_CONFIG_KEYS = [\n  'sendVerificationEmail',\n  'forbidClientAccountCreation',\n  'passwordEnrollTokenExpiration',\n  'passwordEnrollTokenExpirationInDays',\n  'restrictCreationByEmailDomain',\n  'loginExpirationInDays',\n  'loginExpiration',\n  'passwordResetTokenExpirationInDays',\n  'passwordResetTokenExpiration',\n  'ambiguousErrorMessages',\n  'bcryptRounds',\n  'defaultFieldSelector',\n  'loginTokenExpirationHours',\n  'tokenSequenceLength',\n  'collection',\n];\n\n/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n * - collection {String|Mongo.Collection} The name of the Mongo.Collection\n *     or the Mongo.Collection object to hold the users.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = this._initializeCollection(options || {});\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogin callback',\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLoginFailure callback',\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: 'onLogout callback',\n    });\n\n    // Expose for testing.\n    this.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n    this.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n    // Thrown when the user cancels the login process (eg, closes an oauth\n    // popup, declines retina scan, etc)\n    const lceName = 'Accounts.LoginCancelledError';\n    this.LoginCancelledError = Meteor.makeErrorType(lceName, function(\n      description\n    ) {\n      this.message = description;\n    });\n    this.LoginCancelledError.prototype.name = lceName;\n\n    // This is used to transmit specific subclass errors over the wire. We\n    // should come up with a more generic way to do this (eg, with some sort of\n    // symbolic error code rather than a number).\n    this.LoginCancelledError.numericError = 0x8acdc2f;\n  }\n\n  _initializeCollection(options) {\n    if (options.collection && typeof options.collection !== 'string' && !(options.collection instanceof Mongo.Collection)) {\n      throw new Meteor.Error('Collection parameter can be only of type string or \"Mongo.Collection\"');\n    }\n\n    let collectionName = 'users';\n    if (typeof options.collection === 'string') {\n      collectionName = options.collection;\n    }\n\n    let collection;\n    if (options.collection instanceof Mongo.Collection) {\n      collection = options.collection;\n    } else {\n      collection = new Mongo.Collection(collectionName, {\n        _preventAutopublish: true,\n        connection: this.connection,\n      });\n    }\n\n    return collection;\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error('userId method not implemented');\n  }\n\n  // merge the defaultFieldSelector with an existing options object\n  _addDefaultFieldSelector(options = {}) {\n    // this will be the most common case for most people, so make it quick\n    if (!this._options.defaultFieldSelector) return options;\n\n    // if no field selector then just use defaultFieldSelector\n    if (!options.fields)\n      return {\n        ...options,\n        fields: this._options.defaultFieldSelector,\n      };\n\n    // if empty field selector then the full user object is explicitly requested, so obey\n    const keys = Object.keys(options.fields);\n    if (!keys.length) return options;\n\n    // if the requested fields are +ve then ignore defaultFieldSelector\n    // assume they are all either +ve or -ve because Mongo doesn't like mixed\n    if (!!options.fields[keys[0]]) return options;\n\n    // The requested fields are -ve.\n    // If the defaultFieldSelector is +ve then use requested fields, otherwise merge them\n    const keys2 = Object.keys(this._options.defaultFieldSelector);\n    return this._options.defaultFieldSelector[keys2[0]]\n      ? options\n      : {\n          ...options,\n          fields: {\n            ...options.fields,\n            ...this._options.defaultFieldSelector,\n          },\n        };\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  user(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOne(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in.\n   * @locus Anywhere\n   * @param {Object} [options]\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   */\n  async userAsync(options) {\n    const userId = this.userId();\n    return userId\n      ? this.users.findOneAsync(userId, this._addDefaultFieldSelector(options))\n      : null;\n  }\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - collection {String|Mongo.Collection}\n  //     A collection name or a Mongo.Collection object to hold the users.\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options. You can also set these in `Meteor.settings.packages.accounts` without the need to call this function.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {Number} options.loginExpiration The number of milliseconds from when a user logs in until their token expires and they are logged out, for a more granular control. If `loginExpirationInDays` is set, it takes precedent.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specified on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordResetTokenExpiration The number of milliseconds from when a link to reset password is sent until token expires and user can't reset password with the link anymore. If `passwordResetTokenExpirationInDays` is set, it takes precedent.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set initial password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Number} options.passwordEnrollTokenExpiration The number of milliseconds from when a link to set initial password is sent until token expires and user can't set password with the link anymore. If `passwordEnrollTokenExpirationInDays` is set, it takes precedent.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   * @param {MongoFieldSpecifier} options.defaultFieldSelector To exclude by default large custom fields from `Meteor.user()` and `Meteor.findUserBy...()` functions when called without a field selector, and all `onLogin`, `onLoginFailure` and `onLogout` callbacks.  Example: `Accounts.config({ defaultFieldSelector: { myBigArray: 0 }})`. Beware when using this. If, for instance, you do not include `email` when excluding the fields, you can have problems with functions like `forgotPassword` that will break because they won't have the required data available. It's recommend that you always keep the fields `_id`, `username`, and `email`.\n   * @param {String|Mongo.Collection} options.collection A collection name or a Mongo.Collection object to hold the users.\n   * @param {Number} options.loginTokenExpirationHours When using the package `accounts-2fa`, use this to set the amount of time a token sent is valid. As it's just a number, you can use, for example, 0.5 to make the token valid for just half hour. The default is 1 hour.\n   * @param {Number} options.tokenSequenceLength When using the package `accounts-2fa`, use this to the size of the token sequence generated. The default is 6.\n   */\n  config(options) {\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\n        'Accounts.config was called on the client but not on the ' +\n          'server; some configuration options may not take effect.'\n      );\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (Object.prototype.hasOwnProperty.call(options, 'oauthSecretKey')) {\n      if (Meteor.isClient) {\n        throw new Error(\n          'The oauthSecretKey option may only be specified on the server'\n        );\n      }\n      if (!Package['oauth-encryption']) {\n        throw new Error(\n          'The oauth-encryption package must be loaded to set oauthSecretKey'\n        );\n      }\n      Package['oauth-encryption'].OAuthEncryption.loadKey(\n        options.oauthSecretKey\n      );\n      options = { ...options };\n      delete options.oauthSecretKey;\n    }\n\n    // Validate config options keys\n    Object.keys(options).forEach(key => {\n      if (!VALID_CONFIG_KEYS.includes(key)) {\n        // TODO Consider just logging a debug message instead to allow for additional keys in the settings here?\n        throw new Meteor.Error(`Accounts.config: Invalid key: ${key}`);\n      }\n    });\n\n    // set values in Accounts._options\n    VALID_CONFIG_KEYS.forEach(key => {\n      if (key in options) {\n        if (key in this._options) {\n          if (key !== 'collection') {\n            throw new Meteor.Error(`Can't set \\`${key}\\` more than once`);\n          }\n        }\n        this._options[key] = options[key];\n      }\n    });\n\n    if (options.collection && options.collection !== this.users._name && options.collection !== this.users) {\n      this.users = this._initializeCollection(options);\n    }\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   *                        The callback receives a single object that\n   *                        holds login details. This object contains the login\n   *                        result type (password, resume, etc.) on both the\n   *                        client and server. `onLogin` callbacks registered\n   *                        on the server also receive extra data, such\n   *                        as user details, connection information, etc.\n   */\n  onLogin(func) {\n    let ret = this._onLoginHook.register(func);\n    // call the just registered callback if already logged in\n    this._startupCallback(ret.callback);\n    return ret;\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (!Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (\n      typeof __meteor_runtime_config__ !== 'undefined' &&\n      __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n    ) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection = DDP.connect(\n        __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL\n      );\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      this._options.loginExpirationInDays === null\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (\n      this._options.loginExpiration ||\n      (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (\n      this._options.passwordResetTokenExpiration ||\n      (this._options.passwordResetTokenExpirationInDays ||\n        DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (\n      this._options.passwordEnrollTokenExpiration ||\n      (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 86400000\n    );\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    let minLifetimeMs = 0.1 * this._getTokenLifetimeMs();\n    const minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs) {\n      minLifetimeMs = minLifetimeCapMs;\n    }\n    return new Date() > new Date(when) - minLifetimeMs;\n  }\n\n  // No-op on the server, overridden on the client.\n  _startupCallback(callback) {}\n}\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = () => Accounts.userId();\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.user = options => Accounts.user(options);\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n * @param {Object} [options]\n * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n */\nMeteor.userAsync = options => Accounts.userAsync(options);\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// how long (in days) until reset password token expires\nconst DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nconst DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nconst MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nexport const EXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n","import crypto from 'crypto';\nimport { Meteor } from 'meteor/meteor'\nimport {\n  AccountsCommon,\n  EXPIRE_TOKENS_INTERVAL_MS,\n} from './accounts_common.js';\nimport { URL } from 'meteor/url';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n// XXX maybe this belongs in the check package\nconst NonEmptyString = Match.Where(x => {\n  check(x, String);\n  return x.length > 0;\n});\n\n/**\n * @summary Constructor for the `Accounts` namespace on the server.\n * @locus Server\n * @class AccountsServer\n * @extends AccountsCommon\n * @instancename accountsServer\n * @param {Object} server A server object such as `Meteor.server`.\n */\nexport class AccountsServer extends AccountsCommon {\n  // Note that this constructor is less likely to be instantiated multiple\n  // times than the `AccountsClient` constructor, because a single server\n  // can provide only one set of methods.\n  constructor(server, options) {\n    super(options || {});\n\n    this._server = server || Meteor.server;\n    // Set up the server's methods, as if by calling Meteor.methods.\n    this._initServerMethods();\n\n    this._initAccountDataHooks();\n\n    // If autopublish is on, publish these user fields. Login service\n    // packages (eg accounts-google) add to these by calling\n    // addAutopublishFields.  Notably, this isn't implemented with multiple\n    // publishes since DDP only merges only across top-level fields, not\n    // subfields (such as 'services.facebook.accessToken')\n    this._autopublishFields = {\n      loggedInUser: ['profile', 'username', 'emails'],\n      otherUsers: ['profile', 'username']\n    };\n\n    // use object to keep the reference when used in functions\n    // where _defaultPublishFields is destructured into lexical scope\n    // for publish callbacks that need `this`\n    this._defaultPublishFields = {\n      projection: {\n        profile: 1,\n        username: 1,\n        emails: 1,\n      }\n    };\n\n    this._initServerPublications();\n\n    // connectionId -> {connection, loginToken}\n    this._accountData = {};\n\n    // connection id -> observe handle for the login token that this connection is\n    // currently associated with, or a number. The number indicates that we are in\n    // the process of setting up the observe (using a number instead of a single\n    // sentinel allows multiple attempts to set up the observe to identify which\n    // one was theirs).\n    this._userObservesForConnections = {};\n    this._nextUserObserveNumber = 1;  // for the number described above.\n\n    // list of all registered handlers.\n    this._loginHandlers = [];\n\n    setupUsersCollection(this.users);\n    setupDefaultLoginHandlers(this);\n    setExpireTokensInterval(this);\n\n    this._validateLoginHook = new Hook({ bindEnvironment: false });\n    this._validateNewUserHooks = [\n      defaultValidateNewUserHook.bind(this)\n    ];\n\n    this._deleteSavedTokensForAllUsersOnStartup();\n\n    this._skipCaseInsensitiveChecksForTest = {};\n\n    this.urls = {\n      resetPassword: (token, extraParams) => this.buildEmailUrl(`#/reset-password/${token}`, extraParams),\n      verifyEmail: (token, extraParams) => this.buildEmailUrl(`#/verify-email/${token}`, extraParams),\n      loginToken: (selector, token, extraParams) =>\n        this.buildEmailUrl(`/?loginToken=${token}&selector=${selector}`, extraParams),\n      enrollAccount: (token, extraParams) => this.buildEmailUrl(`#/enroll-account/${token}`, extraParams),\n    };\n\n    this.addDefaultRateLimit();\n\n    this.buildEmailUrl = (path, extraParams = {}) => {\n      const url = new URL(Meteor.absoluteUrl(path));\n      const params = Object.entries(extraParams);\n      if (params.length > 0) {\n        // Add additional parameters to the url\n        for (const [key, value] of params) {\n          url.searchParams.append(key, value);\n        }\n      }\n      return url.toString();\n    };\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override of \"abstract\" non-implementation in accounts_common.js\n  userId() {\n    // This function only works if called inside a method or a pubication.\n    // Using any of the information from Meteor.user() in a method or\n    // publish function will always use the value from when the function first\n    // runs. This is likely not what the user expects. The way to make this work\n    // in a method or publish function is to do Meteor.find(this.userId).observe\n    // and recompute when the user record changes.\n    const currentInvocation = DDP._CurrentMethodInvocation.get() || DDP._CurrentPublicationInvocation.get();\n    if (!currentInvocation)\n      throw new Error(\"Meteor.userId can only be invoked in method calls or publications.\");\n    return currentInvocation.userId;\n  }\n\n  ///\n  /// LOGIN HOOKS\n  ///\n\n  /**\n   * @summary Validate login attempts.\n   * @locus Server\n   * @param {Function} func Called whenever a login is attempted (either successful or unsuccessful).  A login can be aborted by returning a falsy value or throwing an exception.\n   */\n  validateLoginAttempt(func) {\n    // Exceptions inside the hook callback are passed up to us.\n    return this._validateLoginHook.register(func);\n  }\n\n  /**\n   * @summary Set restrictions on new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Takes the new user object, and returns true to allow the creation or false to abort.\n   */\n  validateNewUser(func) {\n    this._validateNewUserHooks.push(func);\n  }\n\n  /**\n   * @summary Validate login from external service\n   * @locus Server\n   * @param {Function} func Called whenever login/user creation from external service is attempted. Login or user creation based on this login can be aborted by passing a falsy value or throwing an exception.\n   */\n  beforeExternalLogin(func) {\n    if (this._beforeExternalLoginHook) {\n      throw new Error(\"Can only call beforeExternalLogin once\");\n    }\n\n    this._beforeExternalLoginHook = func;\n  }\n\n  ///\n  /// CREATE USER HOOKS\n  ///\n\n  /**\n   * @summary Customize login token creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new token is created.\n   * Return the sequence and the user object. Return true to keep sending the default email, or false to override the behavior.\n   */\n  onCreateLoginToken = function(func) {\n    if (this._onCreateLoginTokenHook) {\n      throw new Error('Can only call onCreateLoginToken once');\n    }\n\n    this._onCreateLoginTokenHook = func;\n  };\n\n  /**\n   * @summary Customize new user creation.\n   * @locus Server\n   * @param {Function} func Called whenever a new user is created. Return the new user object, or throw an `Error` to abort the creation.\n   */\n  onCreateUser(func) {\n    if (this._onCreateUserHook) {\n      throw new Error(\"Can only call onCreateUser once\");\n    }\n\n    this._onCreateUserHook = Meteor.wrapFn(func);\n  }\n\n  /**\n   * @summary Customize oauth user profile updates\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth. Return the profile object to be merged, or throw an `Error` to abort the creation.\n   */\n  onExternalLogin(func) {\n    if (this._onExternalLoginHook) {\n      throw new Error(\"Can only call onExternalLogin once\");\n    }\n\n    this._onExternalLoginHook = func;\n  }\n\n  /**\n   * @summary Customize user selection on external logins\n   * @locus Server\n   * @param {Function} func Called whenever a user is logged in via oauth and a\n   * user is not found with the service id. Return the user or undefined.\n   */\n  setAdditionalFindUserOnExternalLogin(func) {\n    if (this._additionalFindUserOnExternalLogin) {\n      throw new Error(\"Can only call setAdditionalFindUserOnExternalLogin once\");\n    }\n    this._additionalFindUserOnExternalLogin = func;\n  }\n\n  _validateLogin(connection, attempt) {\n    this._validateLoginHook.forEach(callback => {\n      let ret;\n      try {\n        ret = callback(cloneAttemptWithConnection(connection, attempt));\n      }\n      catch (e) {\n        attempt.allowed = false;\n        // XXX this means the last thrown error overrides previous error\n        // messages. Maybe this is surprising to users and we should make\n        // overriding errors more explicit. (see\n        // https://github.com/meteor/meteor/issues/1960)\n        attempt.error = e;\n        return true;\n      }\n      if (! ret) {\n        attempt.allowed = false;\n        // don't override a specific error provided by a previous\n        // validator or the initial attempt (eg \"incorrect password\").\n        if (!attempt.error)\n          attempt.error = new Meteor.Error(403, \"Login forbidden\");\n      }\n      return true;\n    });\n  };\n\n  _successfulLogin(connection, attempt) {\n    this._onLoginHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _failedLogin(connection, attempt) {\n    this._onLoginFailureHook.each(callback => {\n      callback(cloneAttemptWithConnection(connection, attempt));\n      return true;\n    });\n  };\n\n  _successfulLogout(connection, userId) {\n    // don't fetch the user object unless there are some callbacks registered\n    let user;\n    this._onLogoutHook.each(callback => {\n      if (!user && userId) user = this.users.findOne(userId, {fields: this._options.defaultFieldSelector});\n      callback({ user, connection });\n      return true;\n    });\n  };\n\n  // Generates a MongoDB selector that can be used to perform a fast case\n  // insensitive lookup for the given fieldName and string. Since MongoDB does\n  // not support case insensitive indexes, and case insensitive regex queries\n  // are slow, we construct a set of prefix selectors for all permutations of\n  // the first 4 characters ourselves. We first attempt to matching against\n  // these, and because 'prefix expression' regex queries do use indexes (see\n  // http://docs.mongodb.org/v2.6/reference/operator/query/regex/#index-use),\n  // this has been found to greatly improve performance (from 1200ms to 5ms in a\n  // test with 1.000.000 users).\n  _selectorForFastCaseInsensitiveLookup = (fieldName, string) => {\n    // Performance seems to improve up to 4 prefix characters\n    const prefix = string.substring(0, Math.min(string.length, 4));\n    const orClause = generateCasePermutationsForString(prefix).map(\n        prefixPermutation => {\n          const selector = {};\n          selector[fieldName] =\n              new RegExp(`^${Meteor._escapeRegExp(prefixPermutation)}`);\n          return selector;\n        });\n    const caseInsensitiveClause = {};\n    caseInsensitiveClause[fieldName] =\n        new RegExp(`^${Meteor._escapeRegExp(string)}$`, 'i')\n    return {$and: [{$or: orClause}, caseInsensitiveClause]};\n  }\n\n  _findUserByQuery = (query, options) => {\n    let user = null;\n\n    if (query.id) {\n      // default field selector is added within getUserById()\n      user = Meteor.users.findOne(query.id, this._addDefaultFieldSelector(options));\n    } else {\n      options = this._addDefaultFieldSelector(options);\n      let fieldName;\n      let fieldValue;\n      if (query.username) {\n        fieldName = 'username';\n        fieldValue = query.username;\n      } else if (query.email) {\n        fieldName = 'emails.address';\n        fieldValue = query.email;\n      } else {\n        throw new Error(\"shouldn't happen (validation missed something)\");\n      }\n      let selector = {};\n      selector[fieldName] = fieldValue;\n      user = Meteor.users.findOne(selector, options);\n      // If user is not found, try a case insensitive lookup\n      if (!user) {\n        selector = this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue);\n        const candidateUsers = Meteor.users.find(selector, { ...options, limit: 2 }).fetch();\n        // No match if multiple candidates are found\n        if (candidateUsers.length === 1) {\n          user = candidateUsers[0];\n        }\n      }\n    }\n\n    return user;\n  }\n\n  ///\n  /// LOGIN METHODS\n  ///\n\n  // Login methods return to the client an object containing these\n  // fields when the user was logged in successfully:\n  //\n  //   id: userId\n  //   token: *\n  //   tokenExpires: *\n  //\n  // tokenExpires is optional and intends to provide a hint to the\n  // client as to when the token will expire. If not provided, the\n  // client will call Accounts._tokenExpiration, passing it the date\n  // that it received the token.\n  //\n  // The login method will throw an error back to the client if the user\n  // failed to log in.\n  //\n  //\n  // Login handlers and service specific login methods such as\n  // `createUser` internally return a `result` object containing these\n  // fields:\n  //\n  //   type:\n  //     optional string; the service name, overrides the handler\n  //     default if present.\n  //\n  //   error:\n  //     exception; if the user is not allowed to login, the reason why.\n  //\n  //   userId:\n  //     string; the user id of the user attempting to login (if\n  //     known), required for an allowed login.\n  //\n  //   options:\n  //     optional object merged into the result returned by the login\n  //     method; used by HAMK from SRP.\n  //\n  //   stampedLoginToken:\n  //     optional object with `token` and `when` indicating the login\n  //     token is already present in the database, returned by the\n  //     \"resume\" login handler.\n  //\n  // For convenience, login methods can also throw an exception, which\n  // is converted into an {error} result.  However, if the id of the\n  // user attempting the login is known, a {userId, error} result should\n  // be returned instead since the user id is not captured when an\n  // exception is thrown.\n  //\n  // This internal `result` object is automatically converted into the\n  // public {id, token, tokenExpires} object returned to the client.\n\n  // Try a login method, converting thrown exceptions into an {error}\n  // result.  The `type` argument is a default, inserted into the result\n  // object if not explicitly returned.\n  //\n  // Log in a user on a connection.\n  //\n  // We use the method invocation to set the user id on the connection,\n  // not the connection object directly. setUserId is tied to methods to\n  // enforce clear ordering of method application (using wait methods on\n  // the client, and a no setUserId after unblock restriction on the\n  // server)\n  //\n  // The `stampedLoginToken` parameter is optional.  When present, it\n  // indicates that the login token has already been inserted into the\n  // database and doesn't need to be inserted again.  (It's used by the\n  // \"resume\" login handler).\n  _loginUser(methodInvocation, userId, stampedLoginToken) {\n    if (! stampedLoginToken) {\n      stampedLoginToken = this._generateStampedLoginToken();\n      this._insertLoginToken(userId, stampedLoginToken);\n    }\n\n    // This order (and the avoidance of yields) is important to make\n    // sure that when publish functions are rerun, they see a\n    // consistent view of the world: the userId is set and matches\n    // the login token on the connection (not that there is\n    // currently a public API for reading the login token on a\n    // connection).\n    Meteor._noYieldsAllowed(() =>\n      this._setLoginToken(\n        userId,\n        methodInvocation.connection,\n        this._hashLoginToken(stampedLoginToken.token)\n      )\n    );\n\n    methodInvocation.setUserId(userId);\n\n    return {\n      id: userId,\n      token: stampedLoginToken.token,\n      tokenExpires: this._tokenExpiration(stampedLoginToken.when)\n    };\n  };\n\n  // After a login method has completed, call the login hooks.  Note\n  // that `attemptLogin` is called for *all* login attempts, even ones\n  // which aren't successful (such as an invalid password, etc).\n  //\n  // If the login is allowed and isn't aborted by a validate login hook\n  // callback, log in the user.\n  //\n  async _attemptLogin(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    if (!result)\n      throw new Error(\"result is required\");\n\n    // XXX A programming error in a login handler can lead to this occurring, and\n    // then we don't call onLogin or onLoginFailure callbacks. Should\n    // tryLoginMethod catch this case and turn it into an error?\n    if (!result.userId && !result.error)\n      throw new Error(\"A login method must specify a userId or an error\");\n\n    let user;\n    if (result.userId)\n      user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: !! (result.userId && !result.error),\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n    if (result.error) {\n      attempt.error = result.error;\n    }\n    if (user) {\n      attempt.user = user;\n    }\n\n    // _validateLogin may mutate `attempt` by adding an error and changing allowed\n    // to false, but that's the only change it can make (and the user's callbacks\n    // only get a clone of `attempt`).\n    this._validateLogin(methodInvocation.connection, attempt);\n\n    if (attempt.allowed) {\n      const ret = {\n        ...this._loginUser(\n          methodInvocation,\n          result.userId,\n          result.stampedLoginToken\n        ),\n        ...result.options\n      };\n      ret.type = attempt.type;\n      this._successfulLogin(methodInvocation.connection, attempt);\n      return ret;\n    }\n    else {\n      this._failedLogin(methodInvocation.connection, attempt);\n      throw attempt.error;\n    }\n  };\n\n  // All service specific login methods should go through this function.\n  // Ensure that thrown exceptions are caught and that login hook\n  // callbacks are still called.\n  //\n  async _loginMethod(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    type,\n    fn\n  ) {\n    return await this._attemptLogin(\n      methodInvocation,\n      methodName,\n      methodArgs,\n      await tryLoginMethod(type, fn)\n    );\n  };\n\n\n  // Report a login attempt failed outside the context of a normal login\n  // method. This is for use in the case where there is a multi-step login\n  // procedure (eg SRP based password login). If a method early in the\n  // chain fails, it should call this function to report a failure. There\n  // is no corresponding method for a successful login; methods that can\n  // succeed at logging a user in should always be actual login methods\n  // (using either Accounts._loginMethod or Accounts.registerLoginHandler).\n  _reportLoginFailure(\n    methodInvocation,\n    methodName,\n    methodArgs,\n    result\n  ) {\n    const attempt = {\n      type: result.type || \"unknown\",\n      allowed: false,\n      error: result.error,\n      methodName: methodName,\n      methodArguments: Array.from(methodArgs)\n    };\n\n    if (result.userId) {\n      attempt.user = this.users.findOne(result.userId, {fields: this._options.defaultFieldSelector});\n    }\n\n    this._validateLogin(methodInvocation.connection, attempt);\n    this._failedLogin(methodInvocation.connection, attempt);\n\n    // _validateLogin may mutate attempt to set a new error message. Return\n    // the modified version.\n    return attempt;\n  };\n\n  ///\n  /// LOGIN HANDLERS\n  ///\n\n  /**\n   * @summary Registers a new login handler.\n   * @locus Server\n   * @param {String} [name] The type of login method like oauth, password, etc.\n   * @param {Function} handler A function that receives an options object\n   * (as passed as an argument to the `login` method) and returns one of\n   * `undefined`, meaning don't handle or a login method result object.\n   */\n  registerLoginHandler(name, handler) {\n    if (! handler) {\n      handler = name;\n      name = null;\n    }\n\n    this._loginHandlers.push({\n      name: name,\n      handler: Meteor.wrapFn(handler)\n    });\n  };\n\n\n  // Checks a user's credentials against all the registered login\n  // handlers, and returns a login token if the credentials are valid. It\n  // is like the login method, except that it doesn't set the logged-in\n  // user on the connection. Throws a Meteor.Error if logging in fails,\n  // including the case where none of the login handlers handled the login\n  // request. Otherwise, returns {id: userId, token: *, tokenExpires: *}.\n  //\n  // For example, if you want to login with a plaintext password, `options` could be\n  //   { user: { username: <username> }, password: <password> }, or\n  //   { user: { email: <email> }, password: <password> }.\n\n  // Try all of the registered login handlers until one of them doesn't\n  // return `undefined`, meaning it handled this call to `login`. Return\n  // that return value.\n  async _runLoginHandlers(methodInvocation, options) {\n    for (let handler of this._loginHandlers) {\n      const result = await tryLoginMethod(handler.name, async () =>\n        await handler.handler.call(methodInvocation, options)\n      );\n\n      if (result) {\n        return result;\n      }\n\n      if (result !== undefined) {\n        throw new Meteor.Error(\n          400,\n          'A login handler should return a result or undefined'\n        );\n      }\n    }\n\n    return {\n      type: null,\n      error: new Meteor.Error(400, \"Unrecognized options for login request\")\n    };\n  };\n\n  // Deletes the given loginToken from the database.\n  //\n  // For new-style hashed token, this will cause all connections\n  // associated with the token to be closed.\n  //\n  // Any connections associated with old-style unhashed tokens will be\n  // in the process of becoming associated with hashed tokens and then\n  // they'll get closed.\n  destroyToken(userId, loginToken) {\n    this.users.update(userId, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { hashedToken: loginToken },\n            { token: loginToken }\n          ]\n        }\n      }\n    });\n  };\n\n  _initServerMethods() {\n    // The methods created in this function need to be created here so that\n    // this variable is available in their scope.\n    const accounts = this;\n\n\n    // This object will be populated with methods and then passed to\n    // accounts._server.methods further below.\n    const methods = {};\n\n    // @returns {Object|null}\n    //   If successful, returns {token: reconnectToken, id: userId}\n    //   If unsuccessful (for example, if the user closed the oauth login popup),\n    //     throws an error describing the reason\n    methods.login = async function (options) {\n      // Login handlers should really also check whatever field they look at in\n      // options, but we don't enforce it.\n      check(options, Object);\n\n      const result = await accounts._runLoginHandlers(this, options);\n      //console.log({result});\n\n      return await accounts._attemptLogin(this, \"login\", arguments, result);\n    };\n\n    methods.logout = function () {\n      const token = accounts._getLoginToken(this.connection.id);\n      accounts._setLoginToken(this.userId, this.connection, null);\n      if (token && this.userId) {\n        accounts.destroyToken(this.userId, token);\n      }\n      accounts._successfulLogout(this.connection, this.userId);\n      this.setUserId(null);\n    };\n\n    // Generates a new login token with the same expiration as the\n    // connection's current token and saves it to the database. Associates\n    // the connection with this new token and returns it. Throws an error\n    // if called on a connection that isn't logged in.\n    //\n    // @returns Object\n    //   If successful, returns { token: <new token>, id: <user id>,\n    //   tokenExpires: <expiration date> }.\n    methods.getNewToken = function () {\n      const user = accounts.users.findOne(this.userId, {\n        fields: { \"services.resume.loginTokens\": 1 }\n      });\n      if (! this.userId || ! user) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      // Be careful not to generate a new token that has a later\n      // expiration than the curren token. Otherwise, a bad guy with a\n      // stolen token could use this method to stop his stolen token from\n      // ever expiring.\n      const currentHashedToken = accounts._getLoginToken(this.connection.id);\n      const currentStampedToken = user.services.resume.loginTokens.find(\n        stampedToken => stampedToken.hashedToken === currentHashedToken\n      );\n      if (! currentStampedToken) { // safety belt: this should never happen\n        throw new Meteor.Error(\"Invalid login token\");\n      }\n      const newStampedToken = accounts._generateStampedLoginToken();\n      newStampedToken.when = currentStampedToken.when;\n      accounts._insertLoginToken(this.userId, newStampedToken);\n      return accounts._loginUser(this, this.userId, newStampedToken);\n    };\n\n    // Removes all tokens except the token associated with the current\n    // connection. Throws an error if the connection is not logged\n    // in. Returns nothing on success.\n    methods.removeOtherTokens = function () {\n      if (! this.userId) {\n        throw new Meteor.Error(\"You are not logged in.\");\n      }\n      const currentToken = accounts._getLoginToken(this.connection.id);\n      accounts.users.update(this.userId, {\n        $pull: {\n          \"services.resume.loginTokens\": { hashedToken: { $ne: currentToken } }\n        }\n      });\n    };\n\n    // Allow a one-time configuration for a login service. Modifications\n    // to this collection are also allowed in insecure mode.\n    methods.configureLoginService = (options) => {\n      check(options, Match.ObjectIncluding({service: String}));\n      // Don't let random users configure a service we haven't added yet (so\n      // that when we do later add it, it's set up with their configuration\n      // instead of ours).\n      // XXX if service configuration is oauth-specific then this code should\n      //     be in accounts-oauth; if it's not then the registry should be\n      //     in this package\n      if (!(accounts.oauth\n        && accounts.oauth.serviceNames().includes(options.service))) {\n        throw new Meteor.Error(403, \"Service unknown\");\n      }\n\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        if (ServiceConfiguration.configurations.findOne({service: options.service}))\n          throw new Meteor.Error(403, `Service ${options.service} already configured`);\n\n        if (Package[\"oauth-encryption\"]) {\n          const { OAuthEncryption } = Package[\"oauth-encryption\"]\n          if (hasOwn.call(options, 'secret') && OAuthEncryption.keyIsLoaded())\n            options.secret = OAuthEncryption.seal(options.secret);\n        }\n\n        ServiceConfiguration.configurations.insert(options);\n      }\n    };\n\n    accounts._server.methods(methods);\n  };\n\n  _initAccountDataHooks() {\n    this._server.onConnection(connection => {\n      this._accountData[connection.id] = {\n        connection: connection\n      };\n\n      connection.onClose(() => {\n        this._removeTokenFromConnection(connection.id);\n        delete this._accountData[connection.id];\n      });\n    });\n  };\n\n  _initServerPublications() {\n    // Bring into lexical scope for publish callbacks that need `this`\n    const { users, _autopublishFields, _defaultPublishFields } = this;\n\n    // Publish all login service configuration fields other than secret.\n    this._server.publish(\"meteor.loginServiceConfiguration\", function() {\n      if (Package['service-configuration']) {\n        const { ServiceConfiguration } = Package['service-configuration'];\n        return ServiceConfiguration.configurations.find({}, {fields: {secret: 0}});\n      }\n      this.ready();\n    }, {is_auto: true}); // not technically autopublish, but stops the warning.\n\n    // Use Meteor.startup to give other packages a chance to call\n    // setDefaultPublishFields.\n    Meteor.startup(() => {\n      // Merge custom fields selector and default publish fields so that the client\n      // gets all the necessary fields to run properly\n      const customFields = this._addDefaultFieldSelector().fields || {};\n      const keys = Object.keys(customFields);\n      // If the custom fields are negative, then ignore them and only send the necessary fields\n      const fields = keys.length > 0 && customFields[keys[0]] ? {\n        ...this._addDefaultFieldSelector().fields,\n        ..._defaultPublishFields.projection\n      } : _defaultPublishFields.projection\n      // Publish the current user's record to the client.\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({\n            _id: this.userId\n          }, {\n            fields,\n          });\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n\n    // Use Meteor.startup to give other packages a chance to call\n    // addAutopublishFields.\n    Package.autopublish && Meteor.startup(() => {\n      // ['profile', 'username'] -> {profile: 1, username: 1}\n      const toFieldSelector = fields => fields.reduce((prev, field) => (\n          { ...prev, [field]: 1 }),\n        {}\n      );\n      this._server.publish(null, function () {\n        if (this.userId) {\n          return users.find({ _id: this.userId }, {\n            fields: toFieldSelector(_autopublishFields.loggedInUser),\n          })\n        } else {\n          return null;\n        }\n      }, /*suppress autopublish warning*/{is_auto: true});\n\n      // XXX this publish is neither dedup-able nor is it optimized by our special\n      // treatment of queries on a specific _id. Therefore this will have O(n^2)\n      // run-time performance every time a user document is changed (eg someone\n      // logging in). If this is a problem, we can instead write a manual publish\n      // function which filters out fields based on 'this.userId'.\n      this._server.publish(null, function () {\n        const selector = this.userId ? { _id: { $ne: this.userId } } : {};\n        return users.find(selector, {\n          fields: toFieldSelector(_autopublishFields.otherUsers),\n        })\n      }, /*suppress autopublish warning*/{is_auto: true});\n    });\n  };\n\n  // Add to the list of fields or subfields to be automatically\n  // published if autopublish is on. Must be called from top-level\n  // code (ie, before Meteor.startup hooks run).\n  //\n  // @param opts {Object} with:\n  //   - forLoggedInUser {Array} Array of fields published to the logged-in user\n  //   - forOtherUsers {Array} Array of fields published to users that aren't logged in\n  addAutopublishFields(opts) {\n    this._autopublishFields.loggedInUser.push.apply(\n      this._autopublishFields.loggedInUser, opts.forLoggedInUser);\n    this._autopublishFields.otherUsers.push.apply(\n      this._autopublishFields.otherUsers, opts.forOtherUsers);\n  };\n\n  // Replaces the fields to be automatically\n  // published when the user logs in\n  //\n  // @param {MongoFieldSpecifier} fields Dictionary of fields to return or exclude.\n  setDefaultPublishFields(fields) {\n    this._defaultPublishFields.projection = fields;\n  };\n\n  ///\n  /// ACCOUNT DATA\n  ///\n\n  // HACK: This is used by 'meteor-accounts' to get the loginToken for a\n  // connection. Maybe there should be a public way to do that.\n  _getAccountData(connectionId, field) {\n    const data = this._accountData[connectionId];\n    return data && data[field];\n  };\n\n  _setAccountData(connectionId, field, value) {\n    const data = this._accountData[connectionId];\n\n    // safety belt. shouldn't happen. accountData is set in onConnection,\n    // we don't have a connectionId until it is set.\n    if (!data)\n      return;\n\n    if (value === undefined)\n      delete data[field];\n    else\n      data[field] = value;\n  };\n\n  ///\n  /// RECONNECT TOKENS\n  ///\n  /// support reconnecting using a meteor login token\n\n  _hashLoginToken(loginToken) {\n    const hash = crypto.createHash('sha256');\n    hash.update(loginToken);\n    return hash.digest('base64');\n  };\n\n  // {token, when} => {hashedToken, when}\n  _hashStampedToken(stampedToken) {\n    const { token, ...hashedStampedToken } = stampedToken;\n    return {\n      ...hashedStampedToken,\n      hashedToken: this._hashLoginToken(token)\n    };\n  };\n\n  // Using $addToSet avoids getting an index error if another client\n  // logging in simultaneously has already inserted the new hashed\n  // token.\n  _insertHashedLoginToken(userId, hashedToken, query) {\n    query = query ? { ...query } : {};\n    query._id = userId;\n    this.users.update(query, {\n      $addToSet: {\n        \"services.resume.loginTokens\": hashedToken\n      }\n    });\n  };\n\n  // Exported for tests.\n  _insertLoginToken(userId, stampedToken, query) {\n    this._insertHashedLoginToken(\n      userId,\n      this._hashStampedToken(stampedToken),\n      query\n    );\n  };\n\n  _clearAllLoginTokens(userId) {\n    this.users.update(userId, {\n      $set: {\n        'services.resume.loginTokens': []\n      }\n    });\n  };\n\n  // test hook\n  _getUserObserve(connectionId) {\n    return this._userObservesForConnections[connectionId];\n  };\n\n  // Clean up this connection's association with the token: that is, stop\n  // the observe that we started when we associated the connection with\n  // this token.\n  _removeTokenFromConnection(connectionId) {\n    if (hasOwn.call(this._userObservesForConnections, connectionId)) {\n      const observe = this._userObservesForConnections[connectionId];\n      if (typeof observe === 'number') {\n        // We're in the process of setting up an observe for this connection. We\n        // can't clean up that observe yet, but if we delete the placeholder for\n        // this connection, then the observe will get cleaned up as soon as it has\n        // been set up.\n        delete this._userObservesForConnections[connectionId];\n      } else {\n        delete this._userObservesForConnections[connectionId];\n        observe.stop();\n      }\n    }\n  };\n\n  _getLoginToken(connectionId) {\n    return this._getAccountData(connectionId, 'loginToken');\n  };\n\n  // newToken is a hashed token.\n  _setLoginToken(userId, connection, newToken) {\n    this._removeTokenFromConnection(connection.id);\n    this._setAccountData(connection.id, 'loginToken', newToken);\n\n    if (newToken) {\n      // Set up an observe for this token. If the token goes away, we need\n      // to close the connection.  We defer the observe because there's\n      // no need for it to be on the critical path for login; we just need\n      // to ensure that the connection will get closed at some point if\n      // the token gets deleted.\n      //\n      // Initially, we set the observe for this connection to a number; this\n      // signifies to other code (which might run while we yield) that we are in\n      // the process of setting up an observe for this connection. Once the\n      // observe is ready to go, we replace the number with the real observe\n      // handle (unless the placeholder has been deleted or replaced by a\n      // different placehold number, signifying that the connection was closed\n      // already -- in this case we just clean up the observe that we started).\n      const myObserveNumber = ++this._nextUserObserveNumber;\n      this._userObservesForConnections[connection.id] = myObserveNumber;\n      Meteor.defer(() => {\n        // If something else happened on this connection in the meantime (it got\n        // closed, or another call to _setLoginToken happened), just do\n        // nothing. We don't need to start an observe for an old connection or old\n        // token.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          return;\n        }\n\n        let foundMatchingUser;\n        // Because we upgrade unhashed login tokens to hashed tokens at\n        // login time, sessions will only be logged in with a hashed\n        // token. Thus we only need to observe hashed tokens here.\n        const observe = this.users.find({\n          _id: userId,\n          'services.resume.loginTokens.hashedToken': newToken\n        }, { fields: { _id: 1 } }).observeChanges({\n          added: () => {\n            foundMatchingUser = true;\n          },\n          removed: connection.close,\n          // The onClose callback for the connection takes care of\n          // cleaning up the observe handle and any other state we have\n          // lying around.\n        }, { nonMutatingCallbacks: true });\n\n        // If the user ran another login or logout command we were waiting for the\n        // defer or added to fire (ie, another call to _setLoginToken occurred),\n        // then we let the later one win (start an observe, etc) and just stop our\n        // observe now.\n        //\n        // Similarly, if the connection was already closed, then the onClose\n        // callback would have called _removeTokenFromConnection and there won't\n        // be an entry in _userObservesForConnections. We can stop the observe.\n        if (this._userObservesForConnections[connection.id] !== myObserveNumber) {\n          observe.stop();\n          return;\n        }\n\n        this._userObservesForConnections[connection.id] = observe;\n\n        if (! foundMatchingUser) {\n          // We've set up an observe on the user associated with `newToken`,\n          // so if the new token is removed from the database, we'll close\n          // the connection. But the token might have already been deleted\n          // before we set up the observe, which wouldn't have closed the\n          // connection because the observe wasn't running yet.\n          connection.close();\n        }\n      });\n    }\n  };\n\n  // (Also used by Meteor Accounts server and tests).\n  //\n  _generateStampedLoginToken() {\n    return {\n      token: Random.secret(),\n      when: new Date\n    };\n  };\n\n  ///\n  /// TOKEN EXPIRATION\n  ///\n\n  // Deletes expired password reset tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordResetTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordResetTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      $or: [\n        { \"services.password.reset.reason\": \"reset\"},\n        { \"services.password.reset.reason\": {$exists: false}}\n      ]\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired password enroll tokens from the database.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expirePasswordEnrollTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getPasswordEnrollTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n\n    const tokenFilter = {\n      \"services.password.enroll.reason\": \"enroll\"\n    };\n\n    expirePasswordToken(this, oldestValidDate, tokenFilter, userId);\n  }\n\n  // Deletes expired tokens from the database and closes all open connections\n  // associated with these tokens.\n  //\n  // Exported for tests. Also, the arguments are only used by\n  // tests. oldestValidDate is simulate expiring tokens without waiting\n  // for them to actually expire. userId is used by tests to only expire\n  // tokens for the test user.\n  _expireTokens(oldestValidDate, userId) {\n    const tokenLifetimeMs = this._getTokenLifetimeMs();\n\n    // when calling from a test with extra arguments, you must specify both!\n    if ((oldestValidDate && !userId) || (!oldestValidDate && userId)) {\n      throw new Error(\"Bad test. Must specify both oldestValidDate and userId.\");\n    }\n\n    oldestValidDate = oldestValidDate ||\n      (new Date(new Date() - tokenLifetimeMs));\n    const userFilter = userId ? {_id: userId} : {};\n\n\n    // Backwards compatible with older versions of meteor that stored login token\n    // timestamps as numbers.\n    this.users.update({ ...userFilter,\n      $or: [\n        { \"services.resume.loginTokens.when\": { $lt: oldestValidDate } },\n        { \"services.resume.loginTokens.when\": { $lt: +oldestValidDate } }\n      ]\n    }, {\n      $pull: {\n        \"services.resume.loginTokens\": {\n          $or: [\n            { when: { $lt: oldestValidDate } },\n            { when: { $lt: +oldestValidDate } }\n          ]\n        }\n      }\n    }, { multi: true });\n    // The observe on Meteor.users will take care of closing connections for\n    // expired tokens.\n  };\n\n  // @override from accounts_common.js\n  config(options) {\n    // Call the overridden implementation of the method.\n    const superResult = AccountsCommon.prototype.config.apply(this, arguments);\n\n    // If the user set loginExpirationInDays to null, then we need to clear the\n    // timer that periodically expires tokens.\n    if (hasOwn.call(this._options, 'loginExpirationInDays') &&\n      this._options.loginExpirationInDays === null &&\n      this.expireTokenInterval) {\n      Meteor.clearInterval(this.expireTokenInterval);\n      this.expireTokenInterval = null;\n    }\n\n    return superResult;\n  };\n\n  // Called by accounts-password\n  insertUserDoc(options, user) {\n    // - clone user document, to protect from modification\n    // - add createdAt timestamp\n    // - prepare an _id, so that you can modify other collections (eg\n    // create a first task for every new user)\n    //\n    // XXX If the onCreateUser or validateNewUser hooks fail, we might\n    // end up having modified some other collection\n    // inappropriately. The solution is probably to have onCreateUser\n    // accept two callbacks - one that gets called before inserting\n    // the user document (in which you can modify its contents), and\n    // one that gets called after (in which you should change other\n    // collections)\n    user = {\n      createdAt: new Date(),\n      _id: Random.id(),\n      ...user,\n    };\n\n    if (user.services) {\n      Object.keys(user.services).forEach(service =>\n        pinEncryptedFieldsToUser(user.services[service], user._id)\n      );\n    }\n\n    let fullUser;\n    if (this._onCreateUserHook) {\n      fullUser = this._onCreateUserHook(options, user);\n\n      // This is *not* part of the API. We need this because we can't isolate\n      // the global server environment between tests, meaning we can't test\n      // both having a create user hook set and not having one set.\n      if (fullUser === 'TEST DEFAULT HOOK')\n        fullUser = defaultCreateUserHook(options, user);\n    } else {\n      fullUser = defaultCreateUserHook(options, user);\n    }\n\n    this._validateNewUserHooks.forEach(hook => {\n      if (! hook(fullUser))\n        throw new Meteor.Error(403, \"User validation failed\");\n    });\n\n    let userId;\n    try {\n      userId = this.users.insert(fullUser);\n    } catch (e) {\n      // XXX string parsing sucks, maybe\n      // https://jira.mongodb.org/browse/SERVER-3069 will get fixed one day\n      // https://jira.mongodb.org/browse/SERVER-4637\n      if (!e.errmsg) throw e;\n      if (e.errmsg.includes('emails.address'))\n        throw new Meteor.Error(403, \"Email already exists.\");\n      if (e.errmsg.includes('username'))\n        throw new Meteor.Error(403, \"Username already exists.\");\n      throw e;\n    }\n    return userId;\n  };\n\n  // Helper function: returns false if email does not match company domain from\n  // the configuration.\n  _testEmailDomain(email) {\n    const domain = this._options.restrictCreationByEmailDomain;\n\n    return !domain ||\n      (typeof domain === 'function' && domain(email)) ||\n      (typeof domain === 'string' &&\n        (new RegExp(`@${Meteor._escapeRegExp(domain)}$`, 'i')).test(email));\n  };\n\n  ///\n  /// CLEAN UP FOR `logoutOtherClients`\n  ///\n\n  _deleteSavedTokensForUser(userId, tokensToDelete) {\n    if (tokensToDelete) {\n      this.users.update(userId, {\n        $unset: {\n          \"services.resume.haveLoginTokensToDelete\": 1,\n          \"services.resume.loginTokensToDelete\": 1\n        },\n        $pullAll: {\n          \"services.resume.loginTokens\": tokensToDelete\n        }\n      });\n    }\n  };\n\n  _deleteSavedTokensForAllUsersOnStartup() {\n    // If we find users who have saved tokens to delete on startup, delete\n    // them now. It's possible that the server could have crashed and come\n    // back up before new tokens are found in localStorage, but this\n    // shouldn't happen very often. We shouldn't put a delay here because\n    // that would give a lot of power to an attacker with a stolen login\n    // token and the ability to crash the server.\n    Meteor.startup(() => {\n      this.users.find({\n        \"services.resume.haveLoginTokensToDelete\": true\n      }, {fields: {\n          \"services.resume.loginTokensToDelete\": 1\n        }}).forEach(user => {\n        this._deleteSavedTokensForUser(\n          user._id,\n          user.services.resume.loginTokensToDelete\n        );\n      });\n    });\n  };\n\n  ///\n  /// MANAGING USER OBJECTS\n  ///\n\n  // Updates or creates a user after we authenticate with a 3rd party.\n  //\n  // @param serviceName {String} Service name (eg, twitter).\n  // @param serviceData {Object} Data to store in the user's record\n  //        under services[serviceName]. Must include an \"id\" field\n  //        which is a unique identifier for the user in the service.\n  // @param options {Object, optional} Other options to pass to insertUserDoc\n  //        (eg, profile)\n  // @returns {Object} Object with token and id keys, like the result\n  //        of the \"login\" method.\n  //\n  updateOrCreateUserFromExternalService(\n    serviceName,\n    serviceData,\n    options\n  ) {\n    options = { ...options };\n\n    if (serviceName === \"password\" || serviceName === \"resume\") {\n      throw new Error(\n        \"Can't use updateOrCreateUserFromExternalService with internal service \"\n        + serviceName);\n    }\n    if (!hasOwn.call(serviceData, 'id')) {\n      throw new Error(\n        `Service data for service ${serviceName} must include id`);\n    }\n\n    // Look for a user with the appropriate service user id.\n    const selector = {};\n    const serviceIdKey = `services.${serviceName}.id`;\n\n    // XXX Temporary special case for Twitter. (Issue #629)\n    //   The serviceData.id will be a string representation of an integer.\n    //   We want it to match either a stored string or int representation.\n    //   This is to cater to earlier versions of Meteor storing twitter\n    //   user IDs in number form, and recent versions storing them as strings.\n    //   This can be removed once migration technology is in place, and twitter\n    //   users stored with integer IDs have been migrated to string IDs.\n    if (serviceName === \"twitter\" && !isNaN(serviceData.id)) {\n      selector[\"$or\"] = [{},{}];\n      selector[\"$or\"][0][serviceIdKey] = serviceData.id;\n      selector[\"$or\"][1][serviceIdKey] = parseInt(serviceData.id, 10);\n    } else {\n      selector[serviceIdKey] = serviceData.id;\n    }\n\n    let user = this.users.findOne(selector, {fields: this._options.defaultFieldSelector});\n\n    // Check to see if the developer has a custom way to find the user outside\n    // of the general selectors above.\n    if (!user && this._additionalFindUserOnExternalLogin) {\n      user = this._additionalFindUserOnExternalLogin({serviceName, serviceData, options})\n    }\n\n    // Before continuing, run user hook to see if we should continue\n    if (this._beforeExternalLoginHook && !this._beforeExternalLoginHook(serviceName, serviceData, user)) {\n      throw new Meteor.Error(403, \"Login forbidden\");\n    }\n\n    // When creating a new user we pass through all options. When updating an\n    // existing user, by default we only process/pass through the serviceData\n    // (eg, so that we keep an unexpired access token and don't cache old email\n    // addresses in serviceData.email). The onExternalLogin hook can be used when\n    // creating or updating a user, to modify or pass through more options as\n    // needed.\n    let opts = user ? {} : options;\n    if (this._onExternalLoginHook) {\n      opts = this._onExternalLoginHook(options, user);\n    }\n\n    if (user) {\n      pinEncryptedFieldsToUser(serviceData, user._id);\n\n      let setAttrs = {};\n      Object.keys(serviceData).forEach(key =>\n        setAttrs[`services.${serviceName}.${key}`] = serviceData[key]\n      );\n\n      // XXX Maybe we should re-use the selector above and notice if the update\n      //     touches nothing?\n      setAttrs = { ...setAttrs, ...opts };\n      this.users.update(user._id, {\n        $set: setAttrs\n      });\n\n      return {\n        type: serviceName,\n        userId: user._id\n      };\n    } else {\n      // Create a new user with the service data.\n      user = {services: {}};\n      user.services[serviceName] = serviceData;\n      return {\n        type: serviceName,\n        userId: this.insertUserDoc(opts, user)\n      };\n    }\n  };\n\n  /**\n   * @summary Removes default rate limiting rule\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  removeDefaultRateLimit() {\n    const resp = DDPRateLimiter.removeRule(this.defaultRateLimiterRuleId);\n    this.defaultRateLimiterRuleId = null;\n    return resp;\n  };\n\n  /**\n   * @summary Add a default rule of limiting logins, creating new users and password reset\n   * to 5 times every 10 seconds per connection.\n   * @locus Server\n   * @importFromPackage accounts-base\n   */\n  addDefaultRateLimit() {\n    if (!this.defaultRateLimiterRuleId) {\n      this.defaultRateLimiterRuleId = DDPRateLimiter.addRule({\n        userId: null,\n        clientAddress: null,\n        type: 'method',\n        name: name => ['login', 'createUser', 'resetPassword', 'forgotPassword']\n          .includes(name),\n        connectionId: (connectionId) => true,\n      }, 5, 10000);\n    }\n  };\n\n  /**\n   * @summary Creates options for email sending for reset password and enroll account emails.\n   * You can use this function when customizing a reset password or enroll account email sending.\n   * @locus Server\n   * @param {Object} email Which address of the user's to send the email to.\n   * @param {Object} user The user object to generate options for.\n   * @param {String} url URL to which user is directed to confirm the email.\n   * @param {String} reason `resetPassword` or `enrollAccount`.\n   * @returns {Object} Options which can be passed to `Email.send`.\n   * @importFromPackage accounts-base\n   */\n  generateOptionsForEmail(email, user, url, reason, extra = {}){\n    const options = {\n      to: email,\n      from: this.emailTemplates[reason].from\n        ? this.emailTemplates[reason].from(user)\n        : this.emailTemplates.from,\n      subject: this.emailTemplates[reason].subject(user, url, extra),\n    };\n\n    if (typeof this.emailTemplates[reason].text === 'function') {\n      options.text = this.emailTemplates[reason].text(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates[reason].html === 'function') {\n      options.html = this.emailTemplates[reason].html(user, url, extra);\n    }\n\n    if (typeof this.emailTemplates.headers === 'object') {\n      options.headers = this.emailTemplates.headers;\n    }\n\n    return options;\n  };\n\n  _checkForCaseInsensitiveDuplicates(\n    fieldName,\n    displayName,\n    fieldValue,\n    ownUserId\n  ) {\n    // Some tests need the ability to add users with the same case insensitive\n    // value, hence the _skipCaseInsensitiveChecksForTest check\n    const skipCheck = Object.prototype.hasOwnProperty.call(\n      this._skipCaseInsensitiveChecksForTest,\n      fieldValue\n    );\n\n    if (fieldValue && !skipCheck) {\n      const matchedUsers = Meteor.users\n        .find(\n          this._selectorForFastCaseInsensitiveLookup(fieldName, fieldValue),\n          {\n            fields: { _id: 1 },\n            // we only need a maximum of 2 users for the logic below to work\n            limit: 2,\n          }\n        )\n        .fetch();\n\n      if (\n        matchedUsers.length > 0 &&\n        // If we don't have a userId yet, any match we find is a duplicate\n        (!ownUserId ||\n          // Otherwise, check to see if there are multiple matches or a match\n          // that is not us\n          matchedUsers.length > 1 || matchedUsers[0]._id !== ownUserId)\n      ) {\n        this._handleError(`${displayName} already exists.`);\n      }\n    }\n  };\n\n  _createUserCheckingDuplicates({ user, email, username, options }) {\n    const newUser = {\n      ...user,\n      ...(username ? { username } : {}),\n      ...(email ? { emails: [{ address: email, verified: false }] } : {}),\n    };\n\n    // Perform a case insensitive check before insert\n    this._checkForCaseInsensitiveDuplicates('username', 'Username', username);\n    this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email);\n\n    const userId = this.insertUserDoc(options, newUser);\n    // Perform another check after insert, in case a matching user has been\n    // inserted in the meantime\n    try {\n      this._checkForCaseInsensitiveDuplicates('username', 'Username', username, userId);\n      this._checkForCaseInsensitiveDuplicates('emails.address', 'Email', email, userId);\n    } catch (ex) {\n      // Remove inserted user if the check fails\n      Meteor.users.remove(userId);\n      throw ex;\n    }\n    return userId;\n  }\n\n  _handleError = (msg, throwError = true, errorCode = 403) => {\n    const error = new Meteor.Error(\n      errorCode,\n      this._options.ambiguousErrorMessages\n        ? \"Something went wrong. Please check your credentials.\"\n        : msg\n    );\n    if (throwError) {\n      throw error;\n    }\n    return error;\n  }\n\n  _userQueryValidator = Match.Where(user => {\n    check(user, {\n      id: Match.Optional(NonEmptyString),\n      username: Match.Optional(NonEmptyString),\n      email: Match.Optional(NonEmptyString)\n    });\n    if (Object.keys(user).length !== 1)\n      throw new Match.Error(\"User property must have exactly one field\");\n    return true;\n  });\n\n}\n\n// Give each login hook callback a fresh cloned copy of the attempt\n// object, but don't clone the connection.\n//\nconst cloneAttemptWithConnection = (connection, attempt) => {\n  const clonedAttempt = EJSON.clone(attempt);\n  clonedAttempt.connection = connection;\n  return clonedAttempt;\n};\n\nconst tryLoginMethod = async (type, fn) => {\n  let result;\n  try {\n    result = await fn();\n  }\n  catch (e) {\n    result = {error: e};\n  }\n\n  if (result && !result.type && type)\n    result.type = type;\n\n  return result;\n};\n\nconst setupDefaultLoginHandlers = accounts => {\n  accounts.registerLoginHandler(\"resume\", function (options) {\n    return defaultResumeLoginHandler.call(this, accounts, options);\n  });\n};\n\n// Login handler for resume tokens.\nconst defaultResumeLoginHandler = (accounts, options) => {\n  if (!options.resume)\n    return undefined;\n\n  check(options.resume, String);\n\n  const hashedToken = accounts._hashLoginToken(options.resume);\n\n  // First look for just the new-style hashed login token, to avoid\n  // sending the unhashed token to the database in a query if we don't\n  // need to.\n  let user = accounts.users.findOne(\n    {\"services.resume.loginTokens.hashedToken\": hashedToken},\n    {fields: {\"services.resume.loginTokens.$\": 1}});\n\n  if (! user) {\n    // If we didn't find the hashed login token, try also looking for\n    // the old-style unhashed token.  But we need to look for either\n    // the old-style token OR the new-style token, because another\n    // client connection logging in simultaneously might have already\n    // converted the token.\n    user = accounts.users.findOne({\n        $or: [\n          {\"services.resume.loginTokens.hashedToken\": hashedToken},\n          {\"services.resume.loginTokens.token\": options.resume}\n        ]\n      },\n      // Note: Cannot use ...loginTokens.$ positional operator with $or query.\n      {fields: {\"services.resume.loginTokens\": 1}});\n  }\n\n  if (! user)\n    return {\n      error: new Meteor.Error(403, \"You've been logged out by the server. Please log in again.\")\n    };\n\n  // Find the token, which will either be an object with fields\n  // {hashedToken, when} for a hashed token or {token, when} for an\n  // unhashed token.\n  let oldUnhashedStyleToken;\n  let token = user.services.resume.loginTokens.find(token =>\n    token.hashedToken === hashedToken\n  );\n  if (token) {\n    oldUnhashedStyleToken = false;\n  } else {\n    token = user.services.resume.loginTokens.find(token =>\n      token.token === options.resume\n    );\n    oldUnhashedStyleToken = true;\n  }\n\n  const tokenExpires = accounts._tokenExpiration(token.when);\n  if (new Date() >= tokenExpires)\n    return {\n      userId: user._id,\n      error: new Meteor.Error(403, \"Your session has expired. Please log in again.\")\n    };\n\n  // Update to a hashed token when an unhashed token is encountered.\n  if (oldUnhashedStyleToken) {\n    // Only add the new hashed token if the old unhashed token still\n    // exists (this avoids resurrecting the token if it was deleted\n    // after we read it).  Using $addToSet avoids getting an index\n    // error if another client logging in simultaneously has already\n    // inserted the new hashed token.\n    accounts.users.update(\n      {\n        _id: user._id,\n        \"services.resume.loginTokens.token\": options.resume\n      },\n      {$addToSet: {\n          \"services.resume.loginTokens\": {\n            \"hashedToken\": hashedToken,\n            \"when\": token.when\n          }\n        }}\n    );\n\n    // Remove the old token *after* adding the new, since otherwise\n    // another client trying to login between our removing the old and\n    // adding the new wouldn't find a token to login with.\n    accounts.users.update(user._id, {\n      $pull: {\n        \"services.resume.loginTokens\": { \"token\": options.resume }\n      }\n    });\n  }\n\n  return {\n    userId: user._id,\n    stampedLoginToken: {\n      token: options.resume,\n      when: token.when\n    }\n  };\n};\n\nconst expirePasswordToken = (\n  accounts,\n  oldestValidDate,\n  tokenFilter,\n  userId\n) => {\n  // boolean value used to determine if this method was called from enroll account workflow\n  let isEnroll = false;\n  const userFilter = userId ? {_id: userId} : {};\n  // check if this method was called from enroll account workflow\n  if(tokenFilter['services.password.enroll.reason']) {\n    isEnroll = true;\n  }\n  let resetRangeOr = {\n    $or: [\n      { \"services.password.reset.when\": { $lt: oldestValidDate } },\n      { \"services.password.reset.when\": { $lt: +oldestValidDate } }\n    ]\n  };\n  if(isEnroll) {\n    resetRangeOr = {\n      $or: [\n        { \"services.password.enroll.when\": { $lt: oldestValidDate } },\n        { \"services.password.enroll.when\": { $lt: +oldestValidDate } }\n      ]\n    };\n  }\n  const expireFilter = { $and: [tokenFilter, resetRangeOr] };\n  if(isEnroll) {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.enroll\": \"\"\n      }\n    }, { multi: true });\n  } else {\n    accounts.users.update({...userFilter, ...expireFilter}, {\n      $unset: {\n        \"services.password.reset\": \"\"\n      }\n    }, { multi: true });\n  }\n\n};\n\nconst setExpireTokensInterval = accounts => {\n  accounts.expireTokenInterval = Meteor.setInterval(() => {\n    accounts._expireTokens();\n    accounts._expirePasswordResetTokens();\n    accounts._expirePasswordEnrollTokens();\n  }, EXPIRE_TOKENS_INTERVAL_MS);\n};\n\nconst OAuthEncryption = Package[\"oauth-encryption\"]?.OAuthEncryption;\n\n// OAuth service data is temporarily stored in the pending credentials\n// collection during the oauth authentication process.  Sensitive data\n// such as access tokens are encrypted without the user id because\n// we don't know the user id yet.  We re-encrypt these fields with the\n// user id included when storing the service data permanently in\n// the users collection.\n//\nconst pinEncryptedFieldsToUser = (serviceData, userId) => {\n  Object.keys(serviceData).forEach(key => {\n    let value = serviceData[key];\n    if (OAuthEncryption?.isSealed(value))\n      value = OAuthEncryption.seal(OAuthEncryption.open(value), userId);\n    serviceData[key] = value;\n  });\n};\n\n// XXX see comment on Accounts.createUser in passwords_server about adding a\n// second \"server options\" argument.\nconst defaultCreateUserHook = (options, user) => {\n  if (options.profile)\n    user.profile = options.profile;\n  return user;\n};\n\n// Validate new user's email or Google/Facebook/GitHub account's email\nfunction defaultValidateNewUserHook(user) {\n  const domain = this._options.restrictCreationByEmailDomain;\n  if (!domain) {\n    return true;\n  }\n\n  let emailIsGood = false;\n  if (user.emails && user.emails.length > 0) {\n    emailIsGood = user.emails.reduce(\n      (prev, email) => prev || this._testEmailDomain(email.address), false\n    );\n  } else if (user.services && Object.values(user.services).length > 0) {\n    // Find any email of any service and check it\n    emailIsGood = Object.values(user.services).reduce(\n      (prev, service) => service.email && this._testEmailDomain(service.email),\n      false,\n    );\n  }\n\n  if (emailIsGood) {\n    return true;\n  }\n\n  if (typeof domain === 'string') {\n    throw new Meteor.Error(403, `@${domain} email required`);\n  } else {\n    throw new Meteor.Error(403, \"Email doesn't match the criteria.\");\n  }\n}\n\nconst setupUsersCollection = users => {\n  ///\n  /// RESTRICTING WRITES TO USER OBJECTS\n  ///\n  users.allow({\n    // clients can modify the profile field of their own document, and\n    // nothing else.\n    update: (userId, user, fields, modifier) => {\n      // make sure it is our record\n      if (user._id !== userId) {\n        return false;\n      }\n\n      // user can only modify the 'profile' field. sets to multiple\n      // sub-keys (eg profile.foo and profile.bar) are merged into entry\n      // in the fields list.\n      if (fields.length !== 1 || fields[0] !== 'profile') {\n        return false;\n      }\n\n      return true;\n    },\n    fetch: ['_id'] // we only look at _id.\n  });\n\n  /// DEFAULT INDEXES ON USERS\n  users.createIndexAsync('username', { unique: true, sparse: true });\n  users.createIndexAsync('emails.address', { unique: true, sparse: true });\n  users.createIndexAsync('services.resume.loginTokens.hashedToken',\n    { unique: true, sparse: true });\n  users.createIndexAsync('services.resume.loginTokens.token',\n    { unique: true, sparse: true });\n  // For taking care of logoutOtherClients calls that crashed before the\n  // tokens were deleted.\n  users.createIndexAsync('services.resume.haveLoginTokensToDelete',\n    { sparse: true });\n  // For expiring login tokens\n  users.createIndexAsync(\"services.resume.loginTokens.when\", { sparse: true });\n  // For expiring password tokens\n  users.createIndexAsync('services.password.reset.when', { sparse: true });\n  users.createIndexAsync('services.password.enroll.when', { sparse: true });\n};\n\n\n// Generates permutations of all case variations of a given string.\nconst generateCasePermutationsForString = string => {\n  let permutations = [''];\n  for (let i = 0; i < string.length; i++) {\n    const ch = string.charAt(i);\n    permutations = [].concat(...(permutations.map(prefix => {\n      const lowerCaseChar = ch.toLowerCase();\n      const upperCaseChar = ch.toUpperCase();\n      // Don't add unnecessary permutations when ch is not a letter\n      if (lowerCaseChar === upperCaseChar) {\n        return [prefix + ch];\n      } else {\n        return [prefix + lowerCaseChar, prefix + upperCaseChar];\n      }\n    })));\n  }\n  return permutations;\n}\n\n"]}